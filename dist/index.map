{"version":3,"sources":["tzclient.js","index.js"],"names":["combineUint8Array","x","y","Buffer","concat","RPCall","url","input","method","resolve","reject","url_info","URL","data","req","https","request","origin","host","path","pathname","res","on","d","JSON","parse","trim","setHeader","write","end","decodeBytes","bytes","op_map","prim_map","toUpperCase","index","read","len","slice","walk","b","Array","op","args","apply","prim","map","int_len","parseInt","string_raw","Uint8Array","match","string","TextDecoder","decode","first_bytes","toString","padStart","is_positive","valid_bytes","checknext","push","int","reverse","join","limit","seq_lst","prefix","contract","identity","public_key","secret_key","edesk","signature","operation","mark","TZClient","constructor","params","ready","sodium","fail_check","chain_id","importKey","enc58","bs58check","encode","dec58","length","r2tz","Math","round","tz2r","getKeysFromSeed","seed","seed_raw","key_pair","crypto_sign_seed_keypair","publicKey","privateKey","public_key_hash","crypto_generichash","genMnemonic","bip39","generateMnemonic","getSeedFromMnemonic","mnemonic","password","mnemonicToSeed","encrypted_seed","window","crypto","subtle","encrypted_seed_bytes","salt","encrypted_seed_msg","TextEncoder","name","then","key","deriveBits","iterations","hash","libs","crypto_secretbox_open_easy","raw_public_key","call","post","header","head_custom","protocol","predecessor","head_hash","head","get_hash_key","hash_str","to_hex","hash_key","undefined","big_map_with_key","hash_url","decode_bytes","raw_storage","storage","storage_len","storage_data","big_map","big_map_obj","makePlain","obj","catch","err","bytes_string","pack_data","data_json","type_json","param","packed","hash_data","packed_data","from_hex","balance","key_hash","counter","counter1","manager_key","createOpJSON","default_op","reveal","kind","source","fee","gas_limit","storage_limit","transaction","amount","origination","manager_pubkey","result","i","arguments","makeOpWithReveal","op_lst","no_injection","ops","forEach","makeOperations","originate","transfer","destination","activate","secret","pkh","post_data","branch","contents","all","op_req","operation_data","sig","crypto_sign_detached","signed_operation","operation_results","metadata","operation_result","filter","status","contracts","originated_contracts","operation_id","getApiClient","sk","version","tzclient","Api","ac","console","log","getRewardInfo","client"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["import bs58check from 'bs58check'\nimport sodium from 'libsodium-wrappers'\nimport bip39 from 'bip39'\nimport https from 'https'\nimport { URL } from 'url'\n\nconst combineUint8Array = (x, y) => {\n  return new Buffer(Array.from(x).concat(Array.from(y)))\n}\n\nconst RPCall = (url, input, method) => {\n  return new Promise((resolve, reject) => {\n    const url_info = new URL(url)\n\n    let data = ''\n    const req = https.request({\n      method: method,\n      origin: url_info.origin,\n      host: url_info.host,\n      path: url_info.pathname\n    }, res => {\n      res.on('data', d => {\n        data += d + ''\n      })\n      res.on('end', () => {\n        if (data) {\n          resolve(JSON.parse(data.trim()))\n        }\n        else\n          reject()\n      })\n    })\n    req.on('error', reject)\n    if (method === 'POST') {\n      req.setHeader('Content-Type', 'application/json')\n      req.write(JSON.stringify(input))\n    }\n    req.end()\n  })\n}\n\nconst decodeBytes = (bytes) => {\n  const op_map = {\n    '00':'parameter',\n    '01':'storage',\n    '02':'code',\n    '03':'False',\n    '04':'Elt',\n    '05':'Left',\n    '06':'None',\n    '07':'Pair',\n    '08':'Right',\n    '09':'Some',\n    '0A':'True',\n    '0B':'Unit',\n    '0C':'PACK',\n    '0D':'UNPACK',\n    '0E':'BLAKE2B',\n    '0F':'SHA256',\n    '10':'SHA512',\n    '11':'ABS',\n    '12':'ADD',\n    '13':'AMOUNT',\n    '14':'AND',\n    '15':'BALANCE',\n    '16':'CAR',\n    '17':'CDR',\n    '18':'CHECK_SIGNATURE',\n    '19':'COMPARE',\n    '1A':'CONCAT',\n    '1B':'CONS',\n    '1C':'CREATE_ACCOUNT',\n    '1D':'CREATE_CONTRACT',\n    '1E':'IMPLICIT_ACCOUNT',\n    '1F':'DIP',\n    '20':'DROP',\n    '21':'DUP',\n    '22':'EDIV',\n    '23':'EMPTY_MAP',\n    '24':'EMPTY_SET',\n    '25':'EQ',\n    '26':'EXEC',\n    '27':'FAILWITH',\n    '28':'GE',\n    '29':'GET',\n    '2A':'GT',\n    '2B':'HASH_KEY',\n    '2C':'IF',\n    '2D':'IF_CONS',\n    '2E':'IF_LEFT',\n    '2F':'IF_NONE',\n    '30':'INT',\n    '31':'LAMBDA',\n    '32':'LE',\n    '33':'LEFT',\n    '34':'LOOP',\n    '35':'LSL',\n    '36':'LSR',\n    '37':'LT',\n    '38':'MAP',\n    '39':'MEM',\n    '3A':'MUL',\n    '3B':'NEG',\n    '3C':'NEQ',\n    '3D':'NIL',\n    '3E':'NONE',\n    '3F':'NOT',\n    '40':'NOW',\n    '41':'OR',\n    '42':'PAIR',\n    '43':'PUSH',\n    '44':'RIGHT',\n    '45':'SIZE',\n    '46':'SOME',\n    '47':'SOURCE',\n    '48':'SENDER',\n    '49':'SELF',\n    '4A':'STEPS_TO_QUOTA',\n    '4B':'SUB',\n    '4C':'SWAP',\n    '4D':'TRANSFER_TOKENS',\n    '4E':'SET_DELEGATE',\n    '4F':'UNIT',\n    '50':'UPDATE',\n    '51':'XOR',\n    '52':'ITER',\n    '53':'LOOP_LEFT',\n    '54':'ADDRESS',\n    '55':'CONTRACT',\n    '56':'ISNAT',\n    '57':'CAST',\n    '58':'RENAME',\n    '59':'bool',\n    '5A':'contract',\n    '5B':'int',\n    '5C':'key',\n    '5D':'key_hash',\n    '5E':'lambda',\n    '5F':'list',\n    '60':'map',\n    '61':'big_map',\n    '62':'nat',\n    '63':'option',\n    '64':'or',\n    '65':'pair',\n    '66':'set',\n    '67':'signature',\n    '68':'string',\n    '69':'bytes',\n    '6A':'mutez',\n    '6B':'timestamp',\n    '6C':'unit',\n    '6D':'operation',\n    '6E':'address',\n    '6F':'SLICE',\n  }\n\n  const prim_map = {\n    '00': 'int',    \n    '01': 'string',             \n    '02': 'seq',             \n    '03': ['prim', 0],          \n    '04': ['prim', 0, true],  // 0 means the length of args, true means with annotation\n    '05': ['prim', 1],           \n    '06': ['prim', 1, true],   \n    '07': ['prim', 2],          \n    '08': ['prim', 2, true],  \n    '09': ['prim', 3, true],\n    '0A': 'bytes'                  \n  }\n\n  bytes = bytes.toUpperCase()\n  \n  let index = 0\n\n  const read = len => bytes.slice(index, index + len)\n\n  const walk = () => {\n    const b = read(2)\n\n    if (prim_map[b] instanceof Array) {\n\n      index += 2\n      const op = op_map[read(2)]\n      index += 2\n\n      const args = Array.apply(null, new Array(prim_map[b][1]))\n      return {prim: op, args: args.map(x => walk())}\n\n    } else {\n      if (b === '0A') {\n\n        index += 2\n        const len = read(8)\n        index += 8\n        const int_len = parseInt(len, 16) * 2\n        const data = read(int_len)\n        index += int_len\n        return {bytes: data}\n\n      } else if (b === '01') {\n        index += 2\n        const len = read(8)\n        index += 8\n        const int_len = parseInt(len, 16) * 2\n        const data = read(int_len)\n        index += int_len\n\n        const string_raw = new Uint8Array(data.match(/[\\dA-F]{2}/g).map(x => parseInt(x, 16)))\n\n        return {string: new TextDecoder('utf-8').decode(string_raw)}\n\n      } else if (b === '00') {\n        index += 2\n\n        const first_bytes = parseInt(read(2), 16).toString(2).padStart(8, '0')\n        index += 2\n        const is_positive = first_bytes[1] === '0'\n\n        const valid_bytes = [first_bytes.slice(2)]\n\n        let checknext = first_bytes[0] === '1'\n        while (checknext) {\n          const bytes = parseInt(read(2), 16).toString(2).padStart(8, '0')\n          index += 2\n\n          valid_bytes.push(bytes.slice(1))\n          checknext = bytes[0] === '1'\n        }\n\n        return {int: parseInt(valid_bytes.reverse().join(''), 2).toString()}\n      } else if (b === '02') {\n        index += 2\n\n        const len = read(8)\n        index += 8\n        const int_len = parseInt(len, 16) * 2\n        const data = read(int_len)\n        const limit = index + int_len\n\n        const seq_lst = []\n        while (limit > index) {\n          seq_lst.push(walk())\n        }\n        return seq_lst\n      }\n\n    }\n\n  }\n\n  return walk()\n}\n\n\nconst prefix = {\n  contract: new Uint8Array([2,90,121]),\n  identity: new Uint8Array([6, 161, 159]),\n  public_key: new Uint8Array([13, 15, 37, 217]),\n  secret_key: new Uint8Array([43, 246, 78, 7]),\n  edesk: new Uint8Array([7,90,60,179,41]),\n  signature: new Uint8Array([9, 245, 205, 134, 18]),\n  operation: new Uint8Array([5, 116])\n}\nconst mark = {\n  operation: new Uint8Array([3])\n}\n\nexport class TZClient {\n  constructor(params = {}) {\n    this.ready = sodium.ready\n    this.fail_check = Promise.resolve()\n    this.host = params.host || 'https://testnet.tezbridge.com'\n    this.chain_id = 'main'\n    this.importKey(params)\n  }\n\n  static enc58(prefix, input) {\n    return bs58check.encode(combineUint8Array(prefix, input))\n  }\n\n  static dec58(prefix, input) {\n    return bs58check.decode(input).slice(prefix.length)\n  }\n\n  static r2tz(input) {\n    return '' + Math.round(input * 1000000)\n  }\n  static tz2r(input) {\n    return input / 1000000 + ''\n  }\n\n  static getKeysFromSeed(seed) {\n    const seed_raw = seed instanceof Uint8Array ? seed : TZClient.dec58(prefix.secret_key, seed)\n    const key_pair = sodium.crypto_sign_seed_keypair(seed_raw)\n    return {\n      public_key: TZClient.enc58(prefix.public_key, key_pair.publicKey),\n      secret_key: TZClient.enc58(prefix.secret_key, key_pair.privateKey),\n      public_key_hash: TZClient.enc58(prefix.identity, sodium.crypto_generichash(20, key_pair.publicKey))\n    }\n  }\n\n  static genMnemonic() {\n    return bip39.generateMnemonic()\n  }\n\n  static getSeedFromMnemonic(mnemonic, password) {\n    return TZClient.enc58(prefix.secret_key, bip39.mnemonicToSeed(mnemonic, password).slice(0, 32))\n  }\n\n  importKey(params) {\n    this.key_pair = {}\n\n    if (params.encrypted_seed && window.crypto.subtle) {\n      const encrypted_seed_bytes = TZClient.dec58(prefix.edesk, params.encrypted_seed)\n      const salt = encrypted_seed_bytes.slice(0, 8)\n      const encrypted_seed_msg = encrypted_seed_bytes.slice(8)\n\n      this.fail_check = window.crypto.subtle.importKey(\n        'raw',\n        new TextEncoder('utf-8').encode(params.password),\n        {\n          name: 'PBKDF2',\n        },\n        false, \n        ['deriveBits']\n      )\n      .then(key => {\n        return window.crypto.subtle.deriveBits(\n          {\n            name: 'PBKDF2',\n            salt: salt,\n            iterations: 32768,\n            hash: {name: 'SHA-512'}\n          },\n          key,\n          256 \n        )\n      })\n      .then(key => {\n        const seed = TZClient.libs.sodium.crypto_secretbox_open_easy(encrypted_seed_msg, new Uint8Array(24), new Uint8Array(key))\n        this.key_pair = TZClient.getKeysFromSeed(seed)\n      })\n    }\n\n    if (params.seed) {\n      this.key_pair = TZClient.getKeysFromSeed(params.seed)\n    }\n\n    if (params.mnemonic && params.password) {\n      this.key_pair = TZClient.getKeysFromSeed(TZClient.getSeedFromMnemonic(params.mnemonic, params.password))\n    }\n\n    if (params.secret_key) {\n      const raw_public_key = TZClient.dec58(prefix.secret_key, params.secret_key).slice(32)\n      this.key_pair = {\n        secret_key: params.secret_key,\n        public_key: TZClient.enc58(prefix.public_key, raw_public_key),\n        public_key_hash: TZClient.enc58(prefix.identity, sodium.crypto_generichash(20, raw_public_key))\n      }\n    }\n  }\n\n  call(path, data = {}) {\n    return RPCall(this.host + path, data, 'GET')\n  }\n  post(path, data = {}) {\n    return RPCall(this.host + path, data, 'POST')\n  }\n\n  header() {\n    return this.call(`/chains/${this.chain_id}/blocks/head/header`)\n  }\n\n  head_custom(path) {\n    return this.call(`/chains/${this.chain_id}/blocks/head${path}`)\n  }\n\n  protocol() {\n    return this.header()\n    .then(x => x.protocol)\n  }\n\n  predecessor() {\n    return this.header()\n    .then(x => x.predecessor)\n  }\n\n  head_hash() {\n    return this.call(`/chains/${this.chain_id}/blocks/head/hash`)\n  }\n\n  head() {\n    return this.call(`/chains/${this.chain_id}/blocks/head`)\n  }\n\n  get_hash_key(prefix, data) {\n    const hash = TZClient.dec58(prefix, data)\n    const hash_str = sodium.to_hex(hash)\n    const hash_key = [[0,2], [2,4], [4,6], [6,8], [8,10], [10,undefined]].map(x => hash_str.slice(x[0], x[1])).join('/')\n\n    return hash_key\n  }\n\n  big_map_with_key(key, contract) {\n    const hash_url = this.get_hash_key(prefix.contract, contract)\n\n    return this.call(`/chains/${this.chain_id}/blocks/head/context/raw/bytes/contracts/index/originated/${hash_url}/big_map/${key}`)\n    .then(x => this.decode_bytes(x.data))\n  }\n\n  raw_storage(contract) {\n    const hash_url = this.get_hash_key(prefix.contract, contract)\n\n    return this.call(`/chains/${this.chain_id}/blocks/head/context/raw/bytes/contracts/index/originated/${hash_url}/data/storage`)\n    .then(storage => {\n      const storage_len = parseInt(storage.slice(0, 8), 16)\n      const storage_data = storage.slice(8, 8 + storage_len * 2)\n      \n      return new Promise((resolve, reject) => {\n        this.call(`/chains/${this.chain_id}/blocks/head/context/raw/bytes/contracts/index/originated/${hash_url}/big_map`)\n        .then(big_map => {\n          const big_map_obj = {}\n          const makePlain = (obj, prefix) => {\n            for (const key in obj) {\n              if (obj.data) {\n                big_map_obj[prefix] = this.decode_bytes(obj.data)\n              } else {\n                makePlain(obj[key], prefix + key)\n              }\n            }\n          }\n          makePlain(big_map, '')\n\n          resolve({\n            storage: this.decode_bytes(storage_data),\n            big_map: big_map_obj\n          })\n        })\n        .catch(err => {\n          resolve({\n            storage: this.decode_bytes(storage_data),\n            big_map: {}\n          })\n        })\n      })\n    })\n    \n  }\n\n  decode_bytes(bytes_string) {\n    return decodeBytes(bytes_string)\n  }\n\n  pack_data(data_json, type_json) {\n    const param = {\"data\": data_json,\"type\":type_json, \"gas\": \"400000\"}\n    return this.post(`/chains/${this.chain_id}/blocks/head/helpers/scripts/pack_data`, param)\n    .then(x => x.packed)\n  }\n\n  hash_data(packed_data) {\n    return Promise.resolve(sodium.to_hex(sodium.crypto_generichash(32, sodium.from_hex(packed_data))))\n  }\n\n  balance(key_hash) {\n    return this.call(`/chains/${this.chain_id}/blocks/head/context/delegates/${key_hash || this.key_pair.public_key_hash}/balance`)\n  }\n\n  counter(key_hash) {\n    return this.call(`/chains/${this.chain_id}/blocks/head/context/contracts/${key_hash || this.key_pair.public_key_hash}/counter`)\n  }\n\n  counter1(key_hash) {\n    return this.counter(key_hash).then(x => parseInt(x) + 1 + '')\n  }\n\n  contract(key_hash) {\n    return this.call(`/chains/${this.chain_id}/blocks/head/context/contracts/${key_hash}`)\n  }\n\n  manager_key(key_hash) {\n    return this.call(`/chains/${this.chain_id}/blocks/head/context/contracts/${key_hash || this.key_pair.public_key_hash}/manager_key`)\n  }\n\n  createOpJSON(name) {\n    const default_op = {\n      reveal: {\n        kind: \"reveal\",\n        source: this.key_pair.public_key_hash,\n        fee: \"0\",\n        gas_limit: \"0\",\n        storage_limit: \"0\",\n        public_key: this.key_pair.public_key\n        // counter: $positive_bignum,\n      },\n      transaction: {\n        kind: 'transaction',\n        source: this.key_pair.public_key_hash,\n        fee: \"0\",\n        gas_limit: \"400000\",\n        storage_limit: \"60000\",\n        amount: \"0\"\n        // counter: $positive_bignum,\n        // destination: $contract_id,\n        // parameters?: $micheline.michelson_v1.expression\n      },\n      origination: {\n        kind: \"origination\",\n        source: this.key_pair.public_key_hash,\n        fee: \"0\",\n        // counter: $positive_bignum,\n        gas_limit: \"400000\",\n        storage_limit: \"60000\",\n        manager_pubkey: this.key_pair.public_key_hash,\n        balance: \"0\",\n        // \"spendable\"?: boolean,\n        // \"delegatable\"?: boolean,\n        // \"delegate\"?: $Signature.Public_key_hash,\n        // \"script\"?: $scripted.contracts\n      }\n    }\n\n    const result = default_op[name]\n    for (let i = 1; i < arguments.length; i++) {\n      Object.assign(result, JSON.parse(JSON.stringify(arguments[i])))\n    }\n\n    return result\n  }\n\n  makeOpWithReveal(source, op_lst, no_injection) {\n    return this.counter1(source).\n      then(counter => {\n        return this.manager_key(source).then(x => {\n          const ops = []\n          if (!x.key)\n            ops.push(this.createOpJSON('reveal', {counter: counter++ + '', source}))\n\n          op_lst.forEach(x => {\n            ops.push(this.createOpJSON(x.kind, x.params, {counter: counter++ + ''}))\n          })\n\n          return this.makeOperations(ops, no_injection)\n        })\n      })\n  }\n\n  originate(params) {\n    const no_injection = params.no_injection\n    delete params.no_injection\n    return this.makeOpWithReveal(params.source, [{kind: 'origination', params}], no_injection)\n  }\n\n  transfer(params) {\n    if (!params.destination) \n      return Promise.reject('lack of destination when calling transfer')\n\n    const no_injection = params.no_injection\n    delete params.no_injection\n    return this.makeOpWithReveal(params.source, [{kind: 'transaction', params}], no_injection)\n  }\n\n  activate(secret) {\n    return this.makeOperations([{\n      kind: 'activate_account',\n      secret,\n      pkh: this.key_pair.public_key_hash\n    }])\n  }\n\n  makeOperations(ops, no_injection) {\n    ops = ops.map(x => {\n      ['fee', 'balance', 'amount'].forEach(key => {\n        if (typeof x[key] === 'number')\n          x[key] = TZClient.r2tz(x[key])\n      })\n\n      ;['gas_limit', 'storage_limit'].forEach(key => {\n        if (typeof x[key] === 'number')\n          x[key] = x[key] + ''\n      })\n      return x\n    })\n\n    return this.head_hash()\n    .then(head_hash => {\n      const post_data = {\n        branch: head_hash,\n        contents: ops\n      }\n\n      return Promise.all([post_data, this.protocol(), this.post(`/chains/${this.chain_id}/blocks/head/helpers/forge/operations`, Object.assign(post_data))])\n      .then(([op_req, protocol, operation_data]) => {\n        const sig = sodium.crypto_sign_detached(sodium.crypto_generichash(32, combineUint8Array(mark.operation, sodium.from_hex(operation_data))), TZClient.dec58(prefix.secret_key, this.key_pair.secret_key))\n        const signed_operation = operation_data + sodium.to_hex(sig)\n\n        op_req.protocol = protocol\n        op_req.signature = TZClient.enc58(prefix.signature, sig)\n\n        return Promise.all([\n          this.post(`/chains/${this.chain_id}/blocks/head/helpers/preapply/operations`, [op_req]),\n          signed_operation\n        ])\n      })\n    })\n    .then(([x, signed_operation]) => {\n      const operation_results = [].concat.apply([], x.map(x => x.contents.map(x => x.metadata.operation_result))).filter(x => x)\n      if (operation_results.filter(x => x.status !== 'applied').length)\n        return Promise.reject(x)\n\n      const contracts = operation_results.map(x => x.originated_contracts || [])\n      return Promise.all([contracts, no_injection ? null : this.post('/injection/operation', signed_operation)])\n    })\n    .then(([contracts, x]) => ({\n      contracts,\n      operation_id: x\n    }))\n  }\n}\n\nTZClient.libs = {\n  bs58check,\n  sodium,\n  bip39\n}\n\n","import { TZClient } from './tzclient.js'\nimport Api from 'tezexchange-api'\n\nexport const getApiClient = async (sk, version) => {\n  const tzclient = new TZClient()\n  await tzclient.ready\n  tzclient.importKey({secret_key: sk})\n  return new Api(tzclient, null, version)\n}\n\n(async () => {\n  const ac = await getApiClient('edskRwCM7hMRBCFuqqAwkrvyrMiRNvA5NVjN8Neg9UfT5xUpcSRJQDb8y2HgBvwAzM6Ah9d4ykZ1HgN8N426ZYrntLES5gZv79', 'testnet#3')\n  try {\n    // await ac.getStorage('main')\n    // console.log(JSON.stringify(await ac.getOrders()))\n    console.log(JSON.stringify(await ac.getRewardInfo(ac.client.key_pair.public_key_hash)))\n  } catch (err) {\n    console.log(err)\n  }\n})()\n"]}