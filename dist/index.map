{"version":3,"sources":["tzclient.js","index.js"],"names":["combineUint8Array","x","y","Buffer","concat","RPCall","url","input","method","resolve","reject","url_info","URL","data","req","https","request","origin","host","path","pathname","res","on","d","JSON","parse","trim","e","setHeader","write","end","decodeBytes","bytes","op_map","prim_map","toUpperCase","index","read","len","slice","walk","b","Array","op","prim","args","apply","map","int_len","parseInt","string_raw","Uint8Array","match","string","TextDecoder","decode","first_bytes","toString","padStart","is_positive","valid_bytes","checknext","push","int","reverse","join","limit","seq_lst","prefix","contract","identity","public_key","secret_key","edesk","signature","operation","mark","TZClient","constructor","params","ready","sodium","fail_check","chain_id","importKey","enc58","bs58check","encode","dec58","length","r2tz","Math","round","tz2r","getKeysFromSeed","seed","seed_raw","key_pair","crypto_sign_seed_keypair","publicKey","privateKey","public_key_hash","crypto_generichash","genMnemonic","bip39","generateMnemonic","getSeedFromMnemonic","mnemonic","password","mnemonicToSeed","encrypted_seed","encrypted_seed_bytes","salt","encrypted_seed_msg","pbkdf2","err","derivedKey","crypto_secretbox_open_easy","raw_public_key","call","post","header","head_custom","protocol","then","predecessor","head_hash","head","get_hash_key","hash","hash_str","to_hex","hash_key","undefined","big_map_with_key","key","hash_url","decode_bytes","raw_storage","storage","storage_len","storage_data","big_map","big_map_obj","makePlain","obj","catch","bytes_string","pack_data","data_json","type_json","param","packed","hash_data","packed_data","from_hex","balance","key_hash","counter","counter1","manager_key","createOpJSON","name","default_op","result","reveal","kind","source","fee","gas_limit","storage_limit","transaction","amount","origination","manager_pubkey","i","arguments","makeOpWithReveal","op_lst","no_injection","ops","forEach","makeOperations","originate","transfer","destination","activate","secret","pkh","post_data","branch","contents","all","op_req","operation_data","sig","crypto_sign_detached","signed_operation","operation_results","metadata","operation_result","filter","status","contracts","originated_contracts","operation_id","libs","readInput","q","need_hide","rl","readline","createInterface","process","stdin","output","stdout","console","log","question","answer","close","_writeToOutput","stringToWrite","getApiClient","version","tzclient","choice","Api"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["import bs58check from 'bs58check'\nimport sodium from 'libsodium-wrappers'\nimport bip39 from 'bip39'\nimport https from 'https'\nimport { URL } from 'url'\nimport crypto from 'crypto'\n\nconst combineUint8Array = (x, y) => {\n  return new Buffer(Array.from(x).concat(Array.from(y)))\n}\n\nconst RPCall = (url, input, method) => {\n  return new Promise((resolve, reject) => {\n    const url_info = new URL(url)\n\n    let data = ''\n    const req = https.request({\n      method: method,\n      origin: url_info.origin,\n      host: url_info.host,\n      path: url_info.pathname\n    }, res => {\n      res.on('data', d => {\n        data += d + ''\n      })\n      res.on('end', () => {\n        try {\n          resolve(JSON.parse(data.trim()))\n        } catch (e) {\n          reject(data)\n        }\n      })\n    })\n    req.on('error', reject)\n    if (method === 'POST') {\n      req.setHeader('Content-Type', 'application/json')\n      req.write(JSON.stringify(input))\n    }\n    req.end()\n  })\n}\n\nconst decodeBytes = (bytes) => {\n  const op_map = {\n    '00':'parameter',\n    '01':'storage',\n    '02':'code',\n    '03':'False',\n    '04':'Elt',\n    '05':'Left',\n    '06':'None',\n    '07':'Pair',\n    '08':'Right',\n    '09':'Some',\n    '0A':'True',\n    '0B':'Unit',\n    '0C':'PACK',\n    '0D':'UNPACK',\n    '0E':'BLAKE2B',\n    '0F':'SHA256',\n    '10':'SHA512',\n    '11':'ABS',\n    '12':'ADD',\n    '13':'AMOUNT',\n    '14':'AND',\n    '15':'BALANCE',\n    '16':'CAR',\n    '17':'CDR',\n    '18':'CHECK_SIGNATURE',\n    '19':'COMPARE',\n    '1A':'CONCAT',\n    '1B':'CONS',\n    '1C':'CREATE_ACCOUNT',\n    '1D':'CREATE_CONTRACT',\n    '1E':'IMPLICIT_ACCOUNT',\n    '1F':'DIP',\n    '20':'DROP',\n    '21':'DUP',\n    '22':'EDIV',\n    '23':'EMPTY_MAP',\n    '24':'EMPTY_SET',\n    '25':'EQ',\n    '26':'EXEC',\n    '27':'FAILWITH',\n    '28':'GE',\n    '29':'GET',\n    '2A':'GT',\n    '2B':'HASH_KEY',\n    '2C':'IF',\n    '2D':'IF_CONS',\n    '2E':'IF_LEFT',\n    '2F':'IF_NONE',\n    '30':'INT',\n    '31':'LAMBDA',\n    '32':'LE',\n    '33':'LEFT',\n    '34':'LOOP',\n    '35':'LSL',\n    '36':'LSR',\n    '37':'LT',\n    '38':'MAP',\n    '39':'MEM',\n    '3A':'MUL',\n    '3B':'NEG',\n    '3C':'NEQ',\n    '3D':'NIL',\n    '3E':'NONE',\n    '3F':'NOT',\n    '40':'NOW',\n    '41':'OR',\n    '42':'PAIR',\n    '43':'PUSH',\n    '44':'RIGHT',\n    '45':'SIZE',\n    '46':'SOME',\n    '47':'SOURCE',\n    '48':'SENDER',\n    '49':'SELF',\n    '4A':'STEPS_TO_QUOTA',\n    '4B':'SUB',\n    '4C':'SWAP',\n    '4D':'TRANSFER_TOKENS',\n    '4E':'SET_DELEGATE',\n    '4F':'UNIT',\n    '50':'UPDATE',\n    '51':'XOR',\n    '52':'ITER',\n    '53':'LOOP_LEFT',\n    '54':'ADDRESS',\n    '55':'CONTRACT',\n    '56':'ISNAT',\n    '57':'CAST',\n    '58':'RENAME',\n    '59':'bool',\n    '5A':'contract',\n    '5B':'int',\n    '5C':'key',\n    '5D':'key_hash',\n    '5E':'lambda',\n    '5F':'list',\n    '60':'map',\n    '61':'big_map',\n    '62':'nat',\n    '63':'option',\n    '64':'or',\n    '65':'pair',\n    '66':'set',\n    '67':'signature',\n    '68':'string',\n    '69':'bytes',\n    '6A':'mutez',\n    '6B':'timestamp',\n    '6C':'unit',\n    '6D':'operation',\n    '6E':'address',\n    '6F':'SLICE',\n  }\n\n  const prim_map = {\n    '00': 'int',    \n    '01': 'string',             \n    '02': 'seq',             \n    '03': ['prim', 0],          \n    '04': ['prim', 0, true],  // 0 means the length of args, true means with annotation\n    '05': ['prim', 1],           \n    '06': ['prim', 1, true],   \n    '07': ['prim', 2],          \n    '08': ['prim', 2, true],  \n    '09': ['prim', 3, true],\n    '0A': 'bytes'                  \n  }\n\n  bytes = bytes.toUpperCase()\n  \n  let index = 0\n\n  const read = len => bytes.slice(index, index + len)\n\n  const walk = () => {\n    const b = read(2)\n\n    if (prim_map[b] instanceof Array) {\n\n      index += 2\n      const op = op_map[read(2)]\n      index += 2\n\n      const args = Array.apply(null, new Array(prim_map[b][1]))\n      return {prim: op, args: args.map(x => walk())}\n\n    } else {\n      if (b === '0A') {\n\n        index += 2\n        const len = read(8)\n        index += 8\n        const int_len = parseInt(len, 16) * 2\n        const data = read(int_len)\n        index += int_len\n        return {bytes: data}\n\n      } else if (b === '01') {\n        index += 2\n        const len = read(8)\n        index += 8\n        const int_len = parseInt(len, 16) * 2\n        const data = read(int_len)\n        index += int_len\n\n        const string_raw = new Uint8Array(data.match(/[\\dA-F]{2}/g).map(x => parseInt(x, 16)))\n\n        return {string: new TextDecoder('utf-8').decode(string_raw)}\n\n      } else if (b === '00') {\n        index += 2\n\n        const first_bytes = parseInt(read(2), 16).toString(2).padStart(8, '0')\n        index += 2\n        const is_positive = first_bytes[1] === '0'\n\n        const valid_bytes = [first_bytes.slice(2)]\n\n        let checknext = first_bytes[0] === '1'\n        while (checknext) {\n          const bytes = parseInt(read(2), 16).toString(2).padStart(8, '0')\n          index += 2\n\n          valid_bytes.push(bytes.slice(1))\n          checknext = bytes[0] === '1'\n        }\n\n        return {int: parseInt(valid_bytes.reverse().join(''), 2).toString()}\n      } else if (b === '02') {\n        index += 2\n\n        const len = read(8)\n        index += 8\n        const int_len = parseInt(len, 16) * 2\n        const data = read(int_len)\n        const limit = index + int_len\n\n        const seq_lst = []\n        while (limit > index) {\n          seq_lst.push(walk())\n        }\n        return seq_lst\n      }\n\n    }\n\n  }\n\n  return walk()\n}\n\n\nconst prefix = {\n  contract: new Uint8Array([2,90,121]),\n  identity: new Uint8Array([6, 161, 159]),\n  public_key: new Uint8Array([13, 15, 37, 217]),\n  secret_key: new Uint8Array([43, 246, 78, 7]),\n  edesk: new Uint8Array([7,90,60,179,41]),\n  signature: new Uint8Array([9, 245, 205, 134, 18]),\n  operation: new Uint8Array([5, 116])\n}\nconst mark = {\n  operation: new Uint8Array([3])\n}\n\nexport class TZClient {\n  constructor(params = {}) {\n    this.ready = sodium.ready\n    this.fail_check = Promise.resolve()\n    this.host = params.host || 'https://testnet.tezbridge.com'\n    this.chain_id = 'main'\n    this.importKey(params)\n  }\n\n  static enc58(prefix, input) {\n    return bs58check.encode(combineUint8Array(prefix, input))\n  }\n\n  static dec58(prefix, input) {\n    return bs58check.decode(input).slice(prefix.length)\n  }\n\n  static r2tz(input) {\n    return '' + Math.round(input * 1000000)\n  }\n  static tz2r(input) {\n    return input / 1000000 + ''\n  }\n\n  static getKeysFromSeed(seed) {\n    const seed_raw = seed instanceof Uint8Array ? seed : TZClient.dec58(prefix.secret_key, seed)\n    const key_pair = sodium.crypto_sign_seed_keypair(seed_raw)\n    return {\n      public_key: TZClient.enc58(prefix.public_key, key_pair.publicKey),\n      secret_key: TZClient.enc58(prefix.secret_key, key_pair.privateKey),\n      public_key_hash: TZClient.enc58(prefix.identity, sodium.crypto_generichash(20, key_pair.publicKey))\n    }\n  }\n\n  static genMnemonic() {\n    return bip39.generateMnemonic()\n  }\n\n  static getSeedFromMnemonic(mnemonic, password) {\n    return TZClient.enc58(prefix.secret_key, bip39.mnemonicToSeed(mnemonic, password).slice(0, 32))\n  }\n\n  importKey(params) {\n    this.key_pair = {}\n\n    if (params.encrypted_seed) {\n      const encrypted_seed_bytes = TZClient.dec58(prefix.edesk, params.encrypted_seed)\n      const salt = encrypted_seed_bytes.slice(0, 8)\n      const encrypted_seed_msg = encrypted_seed_bytes.slice(8)\n\n      return new Promise((resolve, reject) => {\n        crypto.pbkdf2(params.password, salt, 32768, 32, 'sha512', (err, derivedKey) => {\n          if (err) {\n            reject(err)\n          }\n\n          try {\n            const seed = sodium.crypto_secretbox_open_easy(encrypted_seed_msg, new Buffer(24), derivedKey)\n            this.key_pair = TZClient.getKeysFromSeed(seed)\n            resolve()\n          } catch(err) {\n            reject(err)\n          }\n        })\n      })\n    }\n\n    if (params.seed) {\n      this.key_pair = TZClient.getKeysFromSeed(params.seed)\n    }\n\n    if (params.mnemonic && params.password) {\n      this.key_pair = TZClient.getKeysFromSeed(TZClient.getSeedFromMnemonic(params.mnemonic, params.password))\n    }\n\n    if (params.secret_key) {\n      const raw_public_key = TZClient.dec58(prefix.secret_key, params.secret_key).slice(32)\n      this.key_pair = {\n        secret_key: params.secret_key,\n        public_key: TZClient.enc58(prefix.public_key, raw_public_key),\n        public_key_hash: TZClient.enc58(prefix.identity, sodium.crypto_generichash(20, raw_public_key))\n      }\n    }\n\n    return Promise.resolve()\n  }\n\n  call(path, data = {}) {\n    return RPCall(this.host + path, data, 'GET')\n  }\n  post(path, data = {}) {\n    return RPCall(this.host + path, data, 'POST')\n  }\n\n  header() {\n    return this.call(`/chains/${this.chain_id}/blocks/head/header`)\n  }\n\n  head_custom(path) {\n    return this.call(`/chains/${this.chain_id}/blocks/head${path}`)\n  }\n\n  protocol() {\n    return this.header()\n    .then(x => x.protocol)\n  }\n\n  predecessor() {\n    return this.header()\n    .then(x => x.predecessor)\n  }\n\n  head_hash() {\n    return this.call(`/chains/${this.chain_id}/blocks/head/hash`)\n  }\n\n  head() {\n    return this.call(`/chains/${this.chain_id}/blocks/head`)\n  }\n\n  get_hash_key(prefix, data) {\n    const hash = TZClient.dec58(prefix, data)\n    const hash_str = sodium.to_hex(hash)\n    const hash_key = [[0,2], [2,4], [4,6], [6,8], [8,10], [10,undefined]].map(x => hash_str.slice(x[0], x[1])).join('/')\n\n    return hash_key\n  }\n\n  big_map_with_key(key, contract) {\n    const hash_url = this.get_hash_key(prefix.contract, contract)\n\n    return this.call(`/chains/${this.chain_id}/blocks/head/context/raw/bytes/contracts/index/originated/${hash_url}/big_map/${key}`)\n    .then(x => this.decode_bytes(x.data))\n  }\n\n  raw_storage(contract) {\n    const hash_url = this.get_hash_key(prefix.contract, contract)\n\n    return this.call(`/chains/${this.chain_id}/blocks/head/context/raw/bytes/contracts/index/originated/${hash_url}/data/storage`)\n    .then(storage => {\n      const storage_len = parseInt(storage.slice(0, 8), 16)\n      const storage_data = storage.slice(8, 8 + storage_len * 2)\n      \n      return new Promise((resolve, reject) => {\n        this.call(`/chains/${this.chain_id}/blocks/head/context/raw/bytes/contracts/index/originated/${hash_url}/big_map`)\n        .then(big_map => {\n          const big_map_obj = {}\n          const makePlain = (obj, prefix) => {\n            for (const key in obj) {\n              if (obj.data) {\n                big_map_obj[prefix] = this.decode_bytes(obj.data)\n              } else {\n                makePlain(obj[key], prefix + key)\n              }\n            }\n          }\n          makePlain(big_map, '')\n\n          resolve({\n            storage: this.decode_bytes(storage_data),\n            big_map: big_map_obj\n          })\n        })\n        .catch(err => {\n          resolve({\n            storage: this.decode_bytes(storage_data),\n            big_map: {}\n          })\n        })\n      })\n    })\n    \n  }\n\n  decode_bytes(bytes_string) {\n    return decodeBytes(bytes_string)\n  }\n\n  pack_data(data_json, type_json) {\n    const param = {\"data\": data_json,\"type\":type_json, \"gas\": \"400000\"}\n    return this.post(`/chains/${this.chain_id}/blocks/head/helpers/scripts/pack_data`, param)\n    .then(x => x.packed)\n  }\n\n  hash_data(packed_data) {\n    return Promise.resolve(sodium.to_hex(sodium.crypto_generichash(32, sodium.from_hex(packed_data))))\n  }\n\n  balance(key_hash) {\n    return this.call(`/chains/${this.chain_id}/blocks/head/context/delegates/${key_hash || this.key_pair.public_key_hash}/balance`)\n  }\n\n  counter(key_hash) {\n    return this.call(`/chains/${this.chain_id}/blocks/head/context/contracts/${key_hash || this.key_pair.public_key_hash}/counter`)\n  }\n\n  counter1(key_hash) {\n    return this.counter(key_hash).then(x => parseInt(x) + 1 + '')\n  }\n\n  contract(key_hash) {\n    return this.call(`/chains/${this.chain_id}/blocks/head/context/contracts/${key_hash}`)\n  }\n\n  manager_key(key_hash) {\n    return this.call(`/chains/${this.chain_id}/blocks/head/context/contracts/${key_hash || this.key_pair.public_key_hash}/manager_key`)\n  }\n\n  createOpJSON(name) {\n    const default_op = {\n      reveal: {\n        kind: \"reveal\",\n        source: this.key_pair.public_key_hash,\n        fee: \"0\",\n        gas_limit: \"0\",\n        storage_limit: \"0\",\n        public_key: this.key_pair.public_key\n        // counter: $positive_bignum,\n      },\n      transaction: {\n        kind: 'transaction',\n        source: this.key_pair.public_key_hash,\n        fee: \"0\",\n        gas_limit: \"400000\",\n        storage_limit: \"60000\",\n        amount: \"0\"\n        // counter: $positive_bignum,\n        // destination: $contract_id,\n        // parameters?: $micheline.michelson_v1.expression\n      },\n      origination: {\n        kind: \"origination\",\n        source: this.key_pair.public_key_hash,\n        fee: \"0\",\n        // counter: $positive_bignum,\n        gas_limit: \"400000\",\n        storage_limit: \"60000\",\n        manager_pubkey: this.key_pair.public_key_hash,\n        balance: \"0\",\n        // \"spendable\"?: boolean,\n        // \"delegatable\"?: boolean,\n        // \"delegate\"?: $Signature.Public_key_hash,\n        // \"script\"?: $scripted.contracts\n      }\n    }\n\n    const result = default_op[name]\n    for (let i = 1; i < arguments.length; i++) {\n      Object.assign(result, JSON.parse(JSON.stringify(arguments[i])))\n    }\n\n    return result\n  }\n\n  makeOpWithReveal(source, op_lst, no_injection) {\n    return this.counter1(source).\n      then(counter => {\n        return this.manager_key(source).then(x => {\n          const ops = []\n          if (!x.key)\n            ops.push(this.createOpJSON('reveal', {counter: counter++ + '', source}))\n\n          op_lst.forEach(x => {\n            ops.push(this.createOpJSON(x.kind, x.params, {counter: counter++ + ''}))\n          })\n\n          return this.makeOperations(ops, no_injection)\n        })\n      })\n  }\n\n  originate(params) {\n    const no_injection = params.no_injection\n    delete params.no_injection\n    return this.makeOpWithReveal(params.source, [{kind: 'origination', params}], no_injection)\n  }\n\n  transfer(params) {\n    if (!params.destination) \n      return Promise.reject('lack of destination when calling transfer')\n\n    const no_injection = params.no_injection\n    delete params.no_injection\n    return this.makeOpWithReveal(params.source, [{kind: 'transaction', params}], no_injection)\n  }\n\n  activate(secret) {\n    return this.makeOperations([{\n      kind: 'activate_account',\n      secret,\n      pkh: this.key_pair.public_key_hash\n    }])\n  }\n\n  makeOperations(ops, no_injection) {\n    ops = ops.map(x => {\n      ['fee', 'balance', 'amount'].forEach(key => {\n        if (typeof x[key] === 'number')\n          x[key] = TZClient.r2tz(x[key])\n      })\n\n      ;['gas_limit', 'storage_limit'].forEach(key => {\n        if (typeof x[key] === 'number')\n          x[key] = x[key] + ''\n      })\n      return x\n    })\n\n    return this.head_hash()\n    .then(head_hash => {\n      const post_data = {\n        branch: head_hash,\n        contents: ops\n      }\n\n      return Promise.all([post_data, this.protocol(), this.post(`/chains/${this.chain_id}/blocks/head/helpers/forge/operations`, Object.assign(post_data))])\n      .then(([op_req, protocol, operation_data]) => {\n        const sig = sodium.crypto_sign_detached(sodium.crypto_generichash(32, combineUint8Array(mark.operation, sodium.from_hex(operation_data))), TZClient.dec58(prefix.secret_key, this.key_pair.secret_key))\n        const signed_operation = operation_data + sodium.to_hex(sig)\n\n        op_req.protocol = protocol\n        op_req.signature = TZClient.enc58(prefix.signature, sig)\n\n        return Promise.all([\n          this.post(`/chains/${this.chain_id}/blocks/head/helpers/preapply/operations`, [op_req]),\n          signed_operation\n        ])\n      })\n    })\n    .then(([x, signed_operation]) => {\n      const operation_results = [].concat.apply([], x.map(x => x.contents.map(x => x.metadata.operation_result))).filter(x => x)\n      if (operation_results.filter(x => x.status !== 'applied').length)\n        return Promise.reject(x)\n\n      const contracts = operation_results.map(x => x.originated_contracts || [])\n      return Promise.all([contracts, no_injection ? null : this.post('/injection/operation', signed_operation)])\n    })\n    .then(([contracts, x]) => ({\n      contracts,\n      operation_id: x\n    }))\n  }\n}\n\nTZClient.libs = {\n  bs58check,\n  sodium,\n  bip39\n}\n\n","import { TZClient } from './tzclient.js'\nimport Api from 'tezexchange-api'\nimport readline from 'readline'\nimport Stream from 'stream'\n\nconst readInput = (q, need_hide) => {\n  return new Promise((resolve, reject) => {\n    const rl = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout\n    })\n\n    console.log(q)\n    rl.question('', (answer) => {\n      rl.close()\n      resolve(answer)\n    })\n\n    if (need_hide)\n      rl._writeToOutput = function _writeToOutput(stringToWrite) {\n        rl.output.write('')\n      }\n  })\n}\n\nexport const getApiClient = async ({\n  version,\n  secret_key,\n  encrypted_seed,\n  host\n}) => {\n  const tzclient = new TZClient({host})\n  await tzclient.ready\n\n  if (secret_key) {\n    await tzclient.importKey({secret_key})\n  } else if (encrypted_seed) {\n    const password = await readInput('Password:', true)\n    await tzclient.importKey({encrypted_seed, password})\n  } else {\n    const choice = await readInput('Using unencrypted key(1) or encrypted seed(2):')\n    if (choice == 1) {\n      const secret_key = await readInput('Unencrypted key(edsk):', true)\n      await tzclient.importKey({secret_key})\n    } else if (choice == 2) {\n      const encrypted_seed = await readInput('Encrypted Seed(edesk):', true)\n      const password = await readInput('Password:', true)\n      await tzclient.importKey({encrypted_seed, password})\n    }\n  }\n\n  console.log('=== KEY IMPORTED ===')\n  console.log(`=== HOST: ${tzclient.host} ===`)\n  return new Api(tzclient, null, version)\n}\n\nexport default {\n  getApiClient\n}\n"]}